{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","year","title","summary","poster","genres","className","src","alt","map","genre","index","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","class","movie","id","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"+RAoCeA,MAhCf,YACC,IADeC,EAChB,EADgBA,KAAKC,EACrB,EADqBA,MAAMC,EAC3B,EAD2BA,QAAQC,EACnC,EADmCA,OAAOC,EAC1C,EAD0CA,OAEtC,OAAO,sBAAKC,UAAU,QAAf,UAEH,qBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,sBAAKI,UAAU,cAAf,UACA,oBAAIA,UAAU,eAAd,SAA8BJ,IAC9B,oBAAII,UAAU,cAAd,SAA6BL,IAC7B,oBAAIK,UAAU,SAAd,SAAwBD,EAAOI,KAAI,SAACC,EAAMC,GAAP,OAC/B,oBAAgBL,UAAU,gBAA1B,SAA2CI,GAAlCC,QAKb,oBAAGL,UAAU,iBAAb,UAA+BH,EAAQS,MAAM,EAAG,KAAhD,gBCuCOC,G,kNAjDbC,MAAM,CACJC,WAAU,EACVC,OAAO,I,EAETC,U,sBAAU,8BAAAC,EAAA,sEAKAC,IAAMC,IAAI,4DALV,gBAIWJ,EAJX,EAIDK,KAAMA,KAAML,OAEnB,EAAKM,SAAS,CAACN,SAAOD,WAAU,IANxB,2C,uDAWV,WAKEQ,KAAKN,c,oBAEP,WAEE,MAAyBM,KAAKT,MAAvBC,EAAP,EAAOA,UAAUC,EAAjB,EAAiBA,OACjB,OAAQ,yBAASQ,MAAM,YAAf,SACLT,EACD,qBAAKT,UAAU,SAAf,SACE,sBAAMA,UAAU,gBAAhB,2BAGA,qBAAKA,UAAU,SAAf,SACGU,EAAOP,KAAI,SAAAgB,GAAK,OAClB,cAAC,EAAD,CACCC,GAAID,EAAMC,GAEVzB,KAAMwB,EAAMxB,KACZC,MAAOuB,EAAMvB,MACbC,QAASsB,EAAMtB,QACfC,OAAQqB,EAAME,mBACdtB,OAAQoB,EAAMpB,QALToB,EAAMC,e,GApCHE,IAAMC,YCFxBC,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,a","file":"static/js/main.dfee0ca8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie({year,title,summary,poster,genres})//state 를 사용 x ==> function씀\r\n{\r\n    return <div className=\"movie\">\r\n        \r\n        <img src={poster} alt={title} title={title}/>\r\n        <div className=\"movie__data\">\r\n        <h3 className=\"movie__title\">{title}</h3>\r\n        <h5 className=\"movie__year\">{year}</h5>\r\n        <ul className=\"genres\">{genres.map((genre,index)=>(\r\n            <li key={index} className=\"genres__genre\">{genre}</li>\r\n            //.map을쓰면 배열이 생기는데 각각의 item의 key가 필요하기 때문에 key값을 설정해 준다\r\n            )\r\n        )}\r\n            </ul>\r\n        <p className=\"movie__summary\">{summary.slice(0, 140)}...</p>\r\n        \r\n        \r\n        </div>\r\n    \r\n    </div>;\r\n}\r\nMovie.propTypes={\r\n    id:PropTypes.number.isRequired,\r\n    year:PropTypes.number.isRequired,\r\n    title:PropTypes.string.isRequired,\r\n    summary:PropTypes.string.isRequired,\r\n    poster:PropTypes.string.isRequired,\r\n    genres:PropTypes.arrayOf(PropTypes.string).isRequired\r\n    \r\n\r\n};\r\n\r\nexport default Movie;","import React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n//mount는 생겨나는것 \n\n\nclass App extends React.Component{\n  state={\n    isLoading:true,\n    movies:[]\n  }; \n  getMovies=async()=>\n  {//await를 사용하기 위해서는 async를 써줘야함\n    //await를 써주는 이유는 getMovies 함수에게 \n    //axios가 속도가 느리니 접근이 끝날때까지 기다리라는 말\n    const {data:{data:{movies}}}/*==movies.data.data.movies*/\n     =await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\")\n    this.setState({movies,isLoading:false});//setstate를 이용한 stae값 변경\n     //this.setState({movies:movies})\n    //전자 movies는 state, 후자 movies는 axios의 movies\n    //이지만 걍 movies만쓰겠다 js는 알아서 구분 가능\n  }\n  componentDidMount(){//fetch 데이터 하구 여기서 영화.map가져오기\n    /* setTimeout(()=>//setTimeout 타이머 만료시 함수를 실행\n     {\n       this.setState({isLoading:false});\n     },6000)*/\n    this.getMovies();\n  }\n  render()\n  {\n    const {isLoading,movies}=this.state;\n    return( <section class=\"container\">\n      {isLoading ? (\n      <div className=\"loader\">\n        <span className=\"loader__text_\">Loading....</span>\n      </div>\n      ) : (\n        <div className=\"movies\">\n          {movies.map(movie => (\n         <Movie\n          id={movie.id} \n          key={movie.id}\n          year={movie.year} \n          title={movie.title} \n          summary={movie.summary} \n          poster={movie.medium_cover_image}\n          genres={movie.genres}\n          />\n        ))}\n        </div>\n    )}\n    </section>\n    );\n  }\n}\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//#3.2까지 강의부분\n// //baby가 커가면서 human이 되어가듯이 특성을 그대로 가지면서 성장한다 extend(확장)\n// class App extends React.Component{\n//   //클래서 React.Component는 return method를 안 가지고 있다. \n//   //하지만 extend from App.component했기 때문에 그리고 app컴포에는 render 메소드가 없다.\n//   //extend했기 때문에 app 컴포도 render 메소드가 있는것이다. \n//   //또한 function 컴포는 함수고 뭔가를 return 하여 호면에 표시\n//   //그리고 class 컴포는 클래스다 but react 컴포로 부터 확장되어서 화면에 표시가 됌\n//   //react는 모든 클래스 컴포의 render메소드를 실행\n  \n//   //state는 객체, 컴포의 데이터를 넣을 공간 있음 이 데이터는 변함**따라서 sate를 사용\n  \n  \n//   //**************************\n//   //총정리==> 매순간 setState를 호출할때마다\n//   //리액트는 새로운 state와함께 render()을 호출\n//   //constructor() class내에서 객체를 생성,제가 메서드\n//   constructor(props)\n//   {super(props);\n//     console.log(\"hello\");\n//   }\n//   state ={\n//     count:0\n//   };\n//   add=()=>{\n//     this.setState(current=>({count:this.state.count+1})); \n//     //state의 상태를 변경할때 react가 render함수를 호출해서 바꿔줘야함\n//     //따라서 setState를 사용하여 빠르게 함수를 불러와 1or-1로 업뎃하는거임\n//   };\n//   componentDidMount()//컴포가 너의 웹사이트 갈때 constructor 을 호출, \n//   //확인하기 위함\n//   {\n//     console.log(\"component renderd\")\n//   }\n//   componentDidUpdate()//state가 업뎃될때 마다 실행\n//   //setState==>component==>render==>componentDidUpdate\n//   {\n//     console.log(\"i just update\")\n//   }\n//   componentWillUnmount()//컴포넌트가 제거(ex:페이지에서 나갈때)되는걸 확인\n//   {\n//     console.log(\"good bye\")\n//   }\n//   minus=()=>{\n//     this.setState(current=>({count:this.state.count-1}));\n//   };\n//   render()//하위 class에서 반드시 정의해야하는 메소드\n//   {\n//     console.log(\"im rendering\");\n//     return (\n//     <div> \n//       <h1>\n//         the number is : {this.state.count/*state를 render에다 넣을때*/}\n//       </h1>\n//       {/* react에서 기본적으로 주어지는 onClick 클릭할때 event */}\n//         <button onClick={this.add}>Add</button>\n//         {/*주의점 add()면 클릭도 안했는데 즉시 실행*/}\n//         <button onClick={this.minus}>Minus</button>\n//     </div>\n//     );\n//   }\n// }\n// export default App;\n\n\n\n\n/*노마드 코더 강의 영화앱만들기 #2까지임*/\n// //import Potato from \"./Potato\";//여기서 ./ 는 같은 directory라는 뜻. \n// //Potato.js 와 App.js는 같은 src 다이렉토리 안에들어가 있다.\n\n// function Food({name,picture,rating}/*==props.fav*/)\n// {\n//   //console.log(props.fav); 따라서 여기서 받은 정보를 보면 props값들을 볼수있다 \n//   //이게 react magic\n//   return(\n//   <div>\n//     <h2>I love {name}</h2>\n//     <h4>{rating}/5.0</h4>\n//     <img src={picture} alt={name}/>\n//     </div>\n//   )\n// }\n// const foodILike=[\n//   {\n//     id:1,\n//     name:\"kim\",\n// image:\"http://aeriskitchen.com/wp-content/uploads/2008/09/kimchi_bokkeumbap_02-.jpg\"\n// ,rating:5},\n// {\n//   id:2,\n//   name:\"chi\",\n// image:\"https://3.bp.blogspot.com/-hKwIBxIVcQw/WfsewX3fhJI/AAAAAAAAALk/yHxnxFXcfx4ZKSfHS_RQNKjw3bAC03AnACLcBGAs/s400/DSC07624.jpg\"\n// ,rating :4.9}\n\n// ]\n\n\n// Food.propTypes=//component의 prop의 타입을 확인할때 씀\n// {\n// name:PropTypes.string.isRequired,\n// picture:PropTypes.string.isRequired,\n// rating:PropTypes.number.isRequired\n// }\n// function App() {\n//   return (//어떤걸 return 하느냐. 이것은 HTML을 반환한다\n//     <div>\n//       {foodILike.map(dish=> (<Food key={dish.id} \n//       name={dish.name} \n//       picture={dish.image}\n//       rating={dish.rating}\n//       />))} \n//     </div>\n//   );\n// }\n\n    //여기서 dish가 가르키는건 배열안의 items(음식이름) \n    \n    /* <Food fav=\"kimchi\"/>  \n    <Food fav=\"ramen\"/>\n    <Food fav=\"rice\"/>\n    <Food fav=\"gogi\"/> */\n    /* react의 재사용 기능 */\n    /* 위에는 father component (App())에서 children component(Food())로 \n     원하는 props를 보낼수있다 ==> 7줄로*/\n    /* food component에 fav라는 이름의 property를 kimchi라는 vlaue로\n    prop name을줌 */\n\n//react는 내가 거기에 쓰는 모든 요소를 생성한다. 따라서 vsc에서는 HTML이 보이지 않는다\n//REACT 는 index.html파일안에(31번째줄) \n//그 사이에 요소를 넣는 역할을 담당한다.(나의 모든 react app을 div 사이어 넣는단다)\n//export defalut App;\n// jsx==> HTML+JS html문법이랑 비슷하잖여~\n\n// map은 배열의 각 요소에서 함수를 실행하는 배열을 가지는 js function 이다\n// 그 함수의 결과를 갖는 배열을 준다\n// map은 무조건 배열임\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import Potato from \"./Potato\";\n\nReactDOM.render(<App />,document.getElementById('potato'));\n\n\n//ReactDOM.render(<App /><Potato />,document.getElementById('potato')); \n//이렇게는 사용이 불가능 하다 왜냐하면 react app이 하나의 요소만을 rendering해야 \n//하기 때문==>모든것은 App안에 들어가야한다(component가)!!!!!!!*****************************\n//지금은 App요소를 이미 쓰고 있다.\n\n\n\n\n//component(구성요소)는 HTML을 반환하는 함수다\n//<App />  ==> 우리가 component를 사용할때 component의 형태\n//react는 component를 사용해서 HTML처럼 작성하려는 경우 필요함\n\n\n\n//여기서 potato 는 index.html의 31번째줄(div사이) 그공간에 들어간다.\n//react는 요소를 html안에 저장을 한다\n//index.html 의<div id=\"potato\"></div> 이사이에 요소가 저장된다.\n//react는 소스코드에 처음부터 html을 넣지 않고 추가하거나 제거 할 수 있다.\n//따라서 app이 이걸 실행 할때 빈 html을 실행하고 그리고 react가 내가 작성했던걸\n//html에 밀어 넣는다.(여기서는 potato div에 넣음)\n//react 는 virtual, 존재 하지 않는다. 따라서 react의 속도는 빠르다."],"sourceRoot":""}